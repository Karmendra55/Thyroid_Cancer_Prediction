import os
import streamlit as st
from utils.demo_data import generate_demo_data

def init_session():
    os.makedirs("output/sessions", exist_ok=True)

    defaults = {
        "history": [],
        "use_demo": False,
        "demo_data": {},
        "demo_triggered": False,
        "refresh_clicked": False,
        "demo_counter": 1
    }
    for k, v in defaults.items():
        if k not in st.session_state:
            st.session_state[k] = v

def render_demo_controls():
    """
    Render UI controls for managing demo mode and demo data.

    This function provides interactive buttons in the Streamlit app to 
    toggle demo mode, refresh demo data, and display a visual indicator 
    when demo mode is active. It manages session state flags and 
    regenerates demo data when necessary.

    Behavior
    --------
    - Displays three columns of controls:
        * Column 1: A "Toggle Demo Mode" button to enable/disable demo mode.
        * Column 2: A "Refresh Demo Data" button (visible only when demo mode is active).
        * Column 3: A status badge showing "Demo Mode Active" when demo mode is enabled.
    - Updates session state:
        * st.session_state.use_demo — Tracks whether demo mode is active.
        * st.session_state.demo_triggered — Set when demo mode is toggled on.
        * st.session_state.demo_data — Stores data generated by ``generate_demo_data``.
        * st.session_state.demo_counter — Increments each time new demo data is generated.
    - Regenerates demo data when:
        * Demo mode is activated for the first time in a session, or
        * The refresh button is clicked.

    """
    col1, col2, col3 = st.columns([1, 1, 3])

    toggle_clicked = False
    refresh_clicked = False

    with col1:
        toggle_clicked = st.button("💡 Toggle Demo Mode")

    demo_mode_is_active = st.session_state.use_demo if not toggle_clicked else not st.session_state.use_demo
    with col2:
        if demo_mode_is_active:
            refresh_clicked = st.button("🔁 Refresh Demo Data")

    with col3:
        demo_mode_is_active = st.session_state.use_demo if not toggle_clicked else not st.session_state.use_demo
        if demo_mode_is_active:
            st.markdown(
                "<div style='margin-top: 6px; padding: 6px 12px; background-color: #d4f4ef; color: #084c61; "
                "border-left: 4px solid #0fa; border-radius: 4px; font-size: 0.85em;'>📊 Demo Mode Active</div>",
                unsafe_allow_html=True
            )

    if toggle_clicked:
        st.session_state.use_demo = not st.session_state.use_demo
        st.session_state.demo_triggered = True

    if (st.session_state.use_demo and st.session_state.demo_triggered) or refresh_clicked:
        st.session_state.demo_data = generate_demo_data(st.session_state.demo_counter)
        st.session_state.demo_triggered = False
        st.session_state.demo_counter += 1
